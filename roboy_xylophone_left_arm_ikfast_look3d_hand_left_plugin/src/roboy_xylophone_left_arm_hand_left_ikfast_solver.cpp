/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-07-15 21:07:54.280637
/// Generated using solver lookat3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=((((-1.0)*(0.652816857958148)*x0))+(((-1.0)*(0.482083094670047)*x1)));
x5=(x2*x4);
x6=(x3*x4);
x7=((((0.652816857958148)*x1))+(((-1.0)*(0.482083094670047)*x0)));
x8=(x2*x7);
x9=(x3*x7);
x10=((0.470049021980954)*x0);
x11=((0.34710222817784)*x1);
x12=(x2*(((((-1.0)*(1.0)*x10))+(((-1.0)*(1.0)*x11)))));
x13=((0.34710222817784)*x0);
x14=((0.470049021980954)*x1);
x15=(x2*((x14+(((-1.0)*(1.0)*x13)))));
x16=(x3*((x13+(((-1.0)*(1.0)*x14)))));
x17=(x3*((x10+x11)));
eetrans[0]=((0.29226847631055)+(((0.00373151834326934)*x1))+(((-1.0)*(0.00288379381305185)*x0)));
eetrans[1]=((0.548117422831913)+(((0.00288257471555305)*x1))+(((0.00373874056539234)*x0)));
eetrans[2]=((-0.0077449436618035)+(((6.3789386214729e-5)*x0))+(((-1.0)*(0.000255050427168248)*x1)));
eerot[0]=((-2.35395124552335e-8)+(((0.802002605881257)*x17))+(((0.802002605881257)*x5))+(((0.032229223775389)*x0))+(((0.0509307887045993)*x3))+(((0.592663906434997)*x12))+(((0.592663906434997)*x6))+(((-1.0)*(0.000630203681608669)*x2))+(((-1.0)*(0.000338258162278911)*x15))+(((-1.0)*(0.000338258162278911)*x9))+(((-1.0)*(0.0435919460598837)*x1))+(((-1.0)*(0.000457736542858032)*x16))+(((-1.0)*(0.000457736542858032)*x8)));
eerot[1]=((-1.02954193935676e-8)+(((0.0222754753632312)*x3))+(((0.593288766837162)*x15))+(((0.593288766837162)*x9))+(((0.802848177317964)*x16))+(((0.802848177317964)*x8))+(((-1.0)*(0.043674651410498)*x0))+(((-1.0)*(0.000456868950023898)*x17))+(((-1.0)*(0.000456868950023898)*x5))+(((-1.0)*(0.0322134443010725)*x1))+(((-1.0)*(0.000275630653687949)*x2))+(((-1.0)*(0.000337617028503906)*x12))+(((-1.0)*(0.000337617028503906)*x6)));
eerot[2]=((-4.60753739772066e-7)+(((0.00294687586711084)*x1))+(((0.996900484231048)*x3))+(((-1.0)*(0.000670664901162164)*x0))+(((-1.0)*(0.0123353745610293)*x2))+(((-1.0)*(0.0132395978964269)*x15))+(((-1.0)*(0.0132395978964269)*x9))+(((-1.0)*(0.0179160429688137)*x16))+(((-1.0)*(0.0179160429688137)*x8))+(((-1.0)*(0.0409634150384978)*x17))+(((-1.0)*(0.0409634150384978)*x5))+(((-1.0)*(0.0302711455045181)*x12))+(((-1.0)*(0.0302711455045181)*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 2; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x23000006; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.291971173152001)+(((0.998697985128848)*px))+(((-1.0)*(0.0510099091486014)*pz))+(((-1.0)*(0.000568918475464847)*py)));
new_py=((-0.547987104661898)+(((0.999750937430909)*py))+(((-1.0)*(0.00056999885002848)*px))+(((-1.0)*(0.022310047228307)*pz)));
new_pz=((-0.0194041548143032)+(((0.0223100748045944)*py))+(((0.0510098970876364)*px))+(((0.998448922560049)*pz)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x18=((0.022312936603853)*px);
IkReal x19=((0.0510131048532172)*py);
IkReal x20=((6.37878065922696e-5)+x18+(((-1.0)*x19)));
IkReal x21=((1.60637534624713)*px);
IkReal x22=((1.18623822112633)*py);
IkReal x23=((0.00942747472353449)+(((-1.0)*x21))+(((-1.0)*x22)));
IkReal x24=((0.0421797008331913)*px);
IkReal x25=((0.0363212586357499)*py);
IkReal x26=((-5.28669010127286e-5)+x24+(((-1.0)*x25)));
IkReal x27=((0.998448694722642)*px);
IkReal x28=((-0.00373223322174115)+x27+(((0.0510131048532172)*pz)));
IkReal x29=((0.0247090748105594)*px);
IkReal x30=((9.23156533335105e-5)+(((1.18623822112633)*pz)));
IkReal x31=(x30+(((-1.0)*x29)));
IkReal x32=((0.998449617661671)*px);
IkReal x33=((0.00373223316655691)+(((0.0363212586357499)*pz)));
IkReal x34=(x33+(((-1.0)*x32)));
IkReal x35=((((0.044625873207706)*py))+(((0.102026209706434)*px)));
IkReal x36=((((2.37247644225267)*px))+(((-1.0)*(3.21275069249425)*py)));
IkReal x37=((((0.0726425172714998)*px))+(((0.0843594016663826)*py)));
IkReal x38=((1.99689738944528)*py);
IkReal x39=((-1.0)*(((0.0494181496211188)*py)));
IkReal x40=((-1.0)*(((1.99689923532334)*py)));
IkReal x41=((6.37878065922696e-5)+x19+(((-1.0)*x18)));
IkReal x42=((0.00942747472353449)+x21+x22);
IkReal x43=((-5.28669010127286e-5)+x25+(((-1.0)*x24)));
IkReal x44=((-0.00373223322174115)+(((-1.0)*x27))+(((0.0510131048532172)*pz)));
IkReal x45=(x29+x30);
IkReal x46=(x32+x33);
IkReal gconst0=x20;
IkReal gconst1=x23;
IkReal gconst2=x26;
IkReal gconst3=x28;
IkReal gconst4=x31;
IkReal gconst5=x34;
IkReal gconst6=x20;
IkReal gconst7=x23;
IkReal gconst8=x26;
IkReal gconst9=x28;
IkReal gconst10=x31;
IkReal gconst11=x34;
IkReal gconst12=x35;
IkReal gconst13=x36;
IkReal gconst14=x37;
IkReal gconst15=x38;
IkReal gconst16=x39;
IkReal gconst17=x40;
IkReal gconst18=x35;
IkReal gconst19=x36;
IkReal gconst20=x37;
IkReal gconst21=x38;
IkReal gconst22=x39;
IkReal gconst23=x40;
IkReal gconst24=x41;
IkReal gconst25=x42;
IkReal gconst26=x43;
IkReal gconst27=x44;
IkReal gconst28=x45;
IkReal gconst29=x46;
IkReal gconst30=x41;
IkReal gconst31=x42;
IkReal gconst32=x43;
IkReal gconst33=x44;
IkReal gconst34=x45;
IkReal gconst35=x46;
IkReal x47=(gconst29*gconst32*gconst33);
IkReal x48=(gconst29*gconst30*gconst34);
IkReal x49=(gconst27*gconst30*gconst35);
IkReal x50=(gconst28*gconst31*gconst33);
IkReal x51=(gconst24*gconst29);
IkReal x52=((1.0)*gconst30*gconst35);
IkReal x53=(gconst25*gconst29);
IkReal x54=((1.0)*gconst31*gconst33);
IkReal x55=(gconst26*gconst27);
IkReal x56=((1.0)*gconst32*gconst33);
IkReal x57=(gconst26*gconst28);
IkReal x58=((1.0)*gconst30*gconst34);
IkReal x59=(gconst15*gconst26);
IkReal x60=(gconst16*gconst26);
IkReal x61=(gconst17*gconst24);
IkReal x62=(gconst17*gconst25);
IkReal x63=(gconst18*gconst34);
IkReal x64=(gconst18*gconst35);
IkReal x65=(gconst19*gconst33);
IkReal x66=(gconst20*gconst33);
IkReal x67=(gconst21*gconst32);
IkReal x68=(gconst21*gconst31);
IkReal x69=(gconst22*gconst30);
IkReal x70=(gconst23*gconst30);
IkReal x71=((1.0)*gconst12);
IkReal x72=((1.0)*gconst13);
IkReal x73=((1.0)*gconst14);
IkReal x74=((1.0)*gconst24*gconst29);
IkReal x75=((1.0)*gconst26*gconst28);
IkReal x76=((1.0)*gconst25*gconst29);
IkReal x77=((1.0)*gconst26*gconst27);
IkReal x78=(gconst0*gconst8*gconst9);
IkReal x79=(gconst5*gconst8);
IkReal x80=(gconst1*gconst10*gconst6);
IkReal x81=(gconst18*gconst5);
IkReal x82=(gconst5*gconst6);
IkReal x83=(gconst11*gconst3*gconst6);
IkReal x84=(gconst15*gconst2);
IkReal x85=(gconst2*gconst3);
IkReal x86=(gconst4*gconst7*gconst9);
IkReal x87=(gconst16*gconst2);
IkReal x88=(gconst19*gconst9);
IkReal x89=(gconst2*gconst4);
IkReal x90=(gconst21*gconst7);
IkReal x91=((1.0)*gconst0);
IkReal x92=((1.0)*gconst0*gconst11);
IkReal x93=((1.0)*gconst1*gconst7*gconst9);
IkReal x94=((1.0)*gconst1*gconst5);
IkReal x95=((1.0)*gconst10*gconst6);
IkReal x96=((1.0)*gconst2*gconst4);
IkReal x97=((1.0)*gconst8*gconst9);
IkReal x98=((1.0)*gconst2*gconst3);
op[0]=(((gconst24*x47))+((gconst25*x48))+((gconst26*x49))+((gconst26*x50))+(((-1.0)*x51*x52))+(((-1.0)*x53*x54))+(((-1.0)*x55*x56))+(((-1.0)*x57*x58)));
op[1]=(((gconst12*x47))+((gconst13*x48))+((gconst14*x49))+((gconst14*x50))+((x51*x66))+((x51*x67))+((x53*x63))+((x53*x69))+((x55*x64))+((x55*x70))+((x57*x65))+((x57*x68))+(((-1.0)*x52*x61))+(((-1.0)*x54*x62))+(((-1.0)*x56*x59))+(((-1.0)*x58*x60))+(((-1.0)*x63*x75))+(((-1.0)*x64*x74))+(((-1.0)*x65*x76))+(((-1.0)*x66*x77))+(((-1.0)*x67*x77))+(((-1.0)*x68*x76))+(((-1.0)*x69*x75))+(((-1.0)*x70*x74))+((gconst30*gconst34*x62))+((gconst30*gconst35*x59))+((gconst31*gconst33*x60))+((gconst32*gconst33*x61))+(((-1.0)*gconst27*gconst32*gconst33*x73))+(((-1.0)*gconst28*gconst30*gconst34*x73))+(((-1.0)*gconst29*gconst30*gconst35*x71))+(((-1.0)*gconst29*gconst31*gconst33*x72)));
op[2]=(((gconst0*gconst29*gconst32*gconst33))+((gconst1*gconst29*gconst30*gconst34))+((gconst10*gconst25*gconst29*gconst30))+((gconst11*gconst26*gconst27*gconst30))+((gconst12*gconst17*gconst32*gconst33))+((gconst12*gconst20*gconst29*gconst33))+((gconst12*gconst21*gconst29*gconst32))+((gconst13*gconst17*gconst30*gconst34))+((gconst13*gconst18*gconst29*gconst34))+((gconst13*gconst22*gconst29*gconst30))+((gconst14*gconst15*gconst30*gconst35))+((gconst14*gconst16*gconst31*gconst33))+((gconst14*gconst18*gconst27*gconst35))+((gconst14*gconst19*gconst28*gconst33))+((gconst14*gconst21*gconst28*gconst31))+((gconst14*gconst23*gconst27*gconst30))+((gconst15*gconst18*gconst26*gconst35))+((gconst15*gconst23*gconst26*gconst30))+((gconst16*gconst19*gconst26*gconst33))+((gconst16*gconst21*gconst26*gconst31))+((gconst17*gconst18*gconst25*gconst34))+((gconst17*gconst20*gconst24*gconst33))+((gconst17*gconst21*gconst24*gconst32))+((gconst17*gconst22*gconst25*gconst30))+((gconst18*gconst22*gconst25*gconst29))+((gconst18*gconst23*gconst26*gconst27))+((gconst19*gconst21*gconst26*gconst28))+((gconst2*gconst27*gconst30*gconst35))+((gconst2*gconst28*gconst31*gconst33))+((gconst20*gconst21*gconst24*gconst29))+((gconst24*gconst29*gconst32*gconst9))+((gconst24*gconst29*gconst33*gconst8))+((gconst24*gconst32*gconst33*gconst5))+((gconst25*gconst29*gconst34*gconst6))+((gconst25*gconst30*gconst34*gconst5))+((gconst26*gconst27*gconst35*gconst6))+((gconst26*gconst28*gconst31*gconst9))+((gconst26*gconst28*gconst33*gconst7))+((gconst26*gconst3*gconst30*gconst35))+((gconst26*gconst31*gconst33*gconst4))+(((-1.0)*gconst0*gconst29*gconst30*gconst35))+(((-1.0)*gconst1*gconst29*gconst31*gconst33))+(((-1.0)*gconst10*gconst26*gconst28*gconst30))+(((-1.0)*gconst11*gconst24*gconst29*gconst30))+(((-1.0)*gconst12*gconst17*gconst30*gconst35))+(((-1.0)*gconst12*gconst18*gconst29*gconst35))+(((-1.0)*gconst12*gconst23*gconst29*gconst30))+(((-1.0)*gconst13*gconst17*gconst31*gconst33))+(((-1.0)*gconst13*gconst19*gconst29*gconst33))+(((-1.0)*gconst13*gconst21*gconst29*gconst31))+(((-1.0)*gconst14*gconst15*gconst32*gconst33))+(((-1.0)*gconst14*gconst16*gconst30*gconst34))+(((-1.0)*gconst14*gconst18*gconst28*gconst34))+(((-1.0)*gconst14*gconst20*gconst27*gconst33))+(((-1.0)*gconst14*gconst21*gconst27*gconst32))+(((-1.0)*gconst14*gconst22*gconst28*gconst30))+(((-1.0)*gconst15*gconst20*gconst26*gconst33))+(((-1.0)*gconst15*gconst21*gconst26*gconst32))+(((-1.0)*gconst16*gconst18*gconst26*gconst34))+(((-1.0)*gconst16*gconst22*gconst26*gconst30))+(((-1.0)*gconst17*gconst18*gconst24*gconst35))+(((-1.0)*gconst17*gconst19*gconst25*gconst33))+(((-1.0)*gconst17*gconst21*gconst25*gconst31))+(((-1.0)*gconst17*gconst23*gconst24*gconst30))+(((-1.0)*gconst18*gconst22*gconst26*gconst28))+(((-1.0)*gconst18*gconst23*gconst24*gconst29))+(((-1.0)*gconst19*gconst21*gconst25*gconst29))+(((-1.0)*gconst2*gconst27*gconst32*gconst33))+(((-1.0)*gconst2*gconst28*gconst30*gconst34))+(((-1.0)*gconst20*gconst21*gconst26*gconst27))+(((-1.0)*gconst24*gconst29*gconst35*gconst6))+(((-1.0)*gconst24*gconst30*gconst35*gconst5))+(((-1.0)*gconst25*gconst29*gconst31*gconst9))+(((-1.0)*gconst25*gconst29*gconst33*gconst7))+(((-1.0)*gconst25*gconst31*gconst33*gconst5))+(((-1.0)*gconst26*gconst27*gconst32*gconst9))+(((-1.0)*gconst26*gconst27*gconst33*gconst8))+(((-1.0)*gconst26*gconst28*gconst34*gconst6))+(((-1.0)*gconst26*gconst3*gconst32*gconst33))+(((-1.0)*gconst26*gconst30*gconst34*gconst4)));
op[3]=(((gconst0*gconst17*gconst32*gconst33))+((gconst0*gconst20*gconst29*gconst33))+((gconst0*gconst21*gconst29*gconst32))+((gconst1*gconst17*gconst30*gconst34))+((gconst1*gconst18*gconst29*gconst34))+((gconst1*gconst22*gconst29*gconst30))+((gconst10*gconst13*gconst29*gconst30))+((gconst10*gconst17*gconst25*gconst30))+((gconst10*gconst18*gconst25*gconst29))+((gconst11*gconst14*gconst27*gconst30))+((gconst11*gconst15*gconst26*gconst30))+((gconst11*gconst18*gconst26*gconst27))+((gconst12*gconst17*gconst20*gconst33))+((gconst12*gconst17*gconst21*gconst32))+((gconst12*gconst20*gconst21*gconst29))+((gconst12*gconst29*gconst32*gconst9))+((gconst12*gconst29*gconst33*gconst8))+((gconst12*gconst32*gconst33*gconst5))+((gconst13*gconst17*gconst18*gconst34))+((gconst13*gconst17*gconst22*gconst30))+((gconst13*gconst18*gconst22*gconst29))+((gconst13*gconst29*gconst34*gconst6))+((gconst13*gconst30*gconst34*gconst5))+((gconst14*gconst15*gconst18*gconst35))+((gconst14*gconst15*gconst23*gconst30))+((gconst14*gconst16*gconst19*gconst33))+((gconst14*gconst16*gconst21*gconst31))+((gconst14*gconst18*gconst23*gconst27))+((gconst14*gconst19*gconst21*gconst28))+((gconst14*gconst27*gconst35*gconst6))+((gconst14*gconst28*gconst31*gconst9))+((gconst14*gconst28*gconst33*gconst7))+((gconst14*gconst3*gconst30*gconst35))+((gconst14*gconst31*gconst33*gconst4))+((gconst15*gconst18*gconst23*gconst26))+((gconst15*gconst2*gconst30*gconst35))+((gconst15*gconst26*gconst35*gconst6))+((gconst16*gconst19*gconst21*gconst26))+((gconst16*gconst2*gconst31*gconst33))+((gconst16*gconst26*gconst31*gconst9))+((gconst16*gconst26*gconst33*gconst7))+((gconst17*gconst18*gconst22*gconst25))+((gconst17*gconst20*gconst21*gconst24))+((gconst17*gconst24*gconst32*gconst9))+((gconst17*gconst24*gconst33*gconst8))+((gconst17*gconst25*gconst34*gconst6))+((gconst18*gconst2*gconst27*gconst35))+((gconst18*gconst25*gconst34*gconst5))+((gconst18*gconst26*gconst3*gconst35))+((gconst19*gconst2*gconst28*gconst33))+((gconst19*gconst26*gconst28*gconst9))+((gconst19*gconst26*gconst33*gconst4))+((gconst2*gconst21*gconst28*gconst31))+((gconst2*gconst23*gconst27*gconst30))+((gconst20*gconst24*gconst29*gconst9))+((gconst20*gconst24*gconst33*gconst5))+((gconst21*gconst24*gconst29*gconst8))+((gconst21*gconst24*gconst32*gconst5))+((gconst21*gconst26*gconst28*gconst7))+((gconst21*gconst26*gconst31*gconst4))+((gconst22*gconst25*gconst29*gconst6))+((gconst22*gconst25*gconst30*gconst5))+((gconst23*gconst26*gconst27*gconst6))+((gconst23*gconst26*gconst3*gconst30))+(((-1.0)*gconst0*gconst17*gconst30*gconst35))+(((-1.0)*gconst0*gconst18*gconst29*gconst35))+(((-1.0)*gconst0*gconst23*gconst29*gconst30))+(((-1.0)*gconst1*gconst17*gconst31*gconst33))+(((-1.0)*gconst1*gconst19*gconst29*gconst33))+(((-1.0)*gconst1*gconst21*gconst29*gconst31))+(((-1.0)*gconst10*gconst14*gconst28*gconst30))+(((-1.0)*gconst10*gconst16*gconst26*gconst30))+(((-1.0)*gconst10*gconst18*gconst26*gconst28))+(((-1.0)*gconst11*gconst12*gconst29*gconst30))+(((-1.0)*gconst11*gconst17*gconst24*gconst30))+(((-1.0)*gconst11*gconst18*gconst24*gconst29))+(((-1.0)*gconst12*gconst17*gconst18*gconst35))+(((-1.0)*gconst12*gconst17*gconst23*gconst30))+(((-1.0)*gconst12*gconst18*gconst23*gconst29))+(((-1.0)*gconst12*gconst29*gconst35*gconst6))+(((-1.0)*gconst12*gconst30*gconst35*gconst5))+(((-1.0)*gconst13*gconst17*gconst19*gconst33))+(((-1.0)*gconst13*gconst17*gconst21*gconst31))+(((-1.0)*gconst13*gconst19*gconst21*gconst29))+(((-1.0)*gconst13*gconst29*gconst31*gconst9))+(((-1.0)*gconst13*gconst29*gconst33*gconst7))+(((-1.0)*gconst13*gconst31*gconst33*gconst5))+(((-1.0)*gconst14*gconst15*gconst20*gconst33))+(((-1.0)*gconst14*gconst15*gconst21*gconst32))+(((-1.0)*gconst14*gconst16*gconst18*gconst34))+(((-1.0)*gconst14*gconst16*gconst22*gconst30))+(((-1.0)*gconst14*gconst18*gconst22*gconst28))+(((-1.0)*gconst14*gconst20*gconst21*gconst27))+(((-1.0)*gconst14*gconst27*gconst32*gconst9))+(((-1.0)*gconst14*gconst27*gconst33*gconst8))+(((-1.0)*gconst14*gconst28*gconst34*gconst6))+(((-1.0)*gconst14*gconst3*gconst32*gconst33))+(((-1.0)*gconst14*gconst30*gconst34*gconst4))+(((-1.0)*gconst15*gconst2*gconst32*gconst33))+(((-1.0)*gconst15*gconst20*gconst21*gconst26))+(((-1.0)*gconst15*gconst26*gconst32*gconst9))+(((-1.0)*gconst15*gconst26*gconst33*gconst8))+(((-1.0)*gconst16*gconst18*gconst22*gconst26))+(((-1.0)*gconst16*gconst2*gconst30*gconst34))+(((-1.0)*gconst16*gconst26*gconst34*gconst6))+(((-1.0)*gconst17*gconst18*gconst23*gconst24))+(((-1.0)*gconst17*gconst19*gconst21*gconst25))+(((-1.0)*gconst17*gconst24*gconst35*gconst6))+(((-1.0)*gconst17*gconst25*gconst31*gconst9))+(((-1.0)*gconst17*gconst25*gconst33*gconst7))+(((-1.0)*gconst18*gconst2*gconst28*gconst34))+(((-1.0)*gconst18*gconst24*gconst35*gconst5))+(((-1.0)*gconst18*gconst26*gconst34*gconst4))+(((-1.0)*gconst19*gconst25*gconst29*gconst9))+(((-1.0)*gconst19*gconst25*gconst33*gconst5))+(((-1.0)*gconst2*gconst20*gconst27*gconst33))+(((-1.0)*gconst2*gconst21*gconst27*gconst32))+(((-1.0)*gconst2*gconst22*gconst28*gconst30))+(((-1.0)*gconst20*gconst26*gconst27*gconst9))+(((-1.0)*gconst20*gconst26*gconst3*gconst33))+(((-1.0)*gconst21*gconst25*gconst29*gconst7))+(((-1.0)*gconst21*gconst25*gconst31*gconst5))+(((-1.0)*gconst21*gconst26*gconst27*gconst8))+(((-1.0)*gconst21*gconst26*gconst3*gconst32))+(((-1.0)*gconst22*gconst26*gconst28*gconst6))+(((-1.0)*gconst22*gconst26*gconst30*gconst4))+(((-1.0)*gconst23*gconst24*gconst29*gconst6))+(((-1.0)*gconst23*gconst24*gconst30*gconst5)));
op[4]=(((gconst0*gconst17*gconst20*gconst33))+((gconst0*gconst17*gconst21*gconst32))+((gconst0*gconst20*gconst21*gconst29))+((gconst0*gconst29*gconst32*gconst9))+((gconst0*gconst29*gconst33*gconst8))+((gconst0*gconst32*gconst33*gconst5))+((gconst1*gconst10*gconst29*gconst30))+((gconst1*gconst17*gconst18*gconst34))+((gconst1*gconst17*gconst22*gconst30))+((gconst1*gconst18*gconst22*gconst29))+((gconst1*gconst29*gconst34*gconst6))+((gconst1*gconst30*gconst34*gconst5))+((gconst10*gconst13*gconst17*gconst30))+((gconst10*gconst13*gconst18*gconst29))+((gconst10*gconst17*gconst18*gconst25))+((gconst10*gconst25*gconst29*gconst6))+((gconst10*gconst25*gconst30*gconst5))+((gconst11*gconst14*gconst15*gconst30))+((gconst11*gconst14*gconst18*gconst27))+((gconst11*gconst15*gconst18*gconst26))+((gconst11*gconst2*gconst27*gconst30))+((gconst11*gconst26*gconst27*gconst6))+((gconst11*gconst26*gconst3*gconst30))+((gconst12*gconst17*gconst20*gconst21))+((gconst12*gconst17*gconst32*gconst9))+((gconst12*gconst17*gconst33*gconst8))+((gconst12*gconst20*gconst29*gconst9))+((gconst12*gconst20*gconst33*gconst5))+((gconst12*gconst21*gconst29*gconst8))+((gconst12*gconst21*gconst32*gconst5))+((gconst13*gconst17*gconst18*gconst22))+((gconst13*gconst17*gconst34*gconst6))+((gconst13*gconst18*gconst34*gconst5))+((gconst13*gconst22*gconst29*gconst6))+((gconst13*gconst22*gconst30*gconst5))+((gconst14*gconst15*gconst18*gconst23))+((gconst14*gconst15*gconst35*gconst6))+((gconst14*gconst16*gconst19*gconst21))+((gconst14*gconst16*gconst31*gconst9))+((gconst14*gconst16*gconst33*gconst7))+((gconst14*gconst18*gconst3*gconst35))+((gconst14*gconst19*gconst28*gconst9))+((gconst14*gconst19*gconst33*gconst4))+((gconst14*gconst21*gconst28*gconst7))+((gconst14*gconst21*gconst31*gconst4))+((gconst14*gconst23*gconst27*gconst6))+((gconst14*gconst23*gconst3*gconst30))+((gconst15*gconst18*gconst2*gconst35))+((gconst15*gconst2*gconst23*gconst30))+((gconst15*gconst23*gconst26*gconst6))+((gconst16*gconst19*gconst2*gconst33))+((gconst16*gconst19*gconst26*gconst9))+((gconst16*gconst2*gconst21*gconst31))+((gconst16*gconst21*gconst26*gconst7))+((gconst17*gconst20*gconst24*gconst9))+((gconst17*gconst21*gconst24*gconst8))+((gconst17*gconst22*gconst25*gconst6))+((gconst18*gconst2*gconst23*gconst27))+((gconst18*gconst22*gconst25*gconst5))+((gconst18*gconst23*gconst26*gconst3))+((gconst19*gconst2*gconst21*gconst28))+((gconst19*gconst21*gconst26*gconst4))+((gconst2*gconst27*gconst35*gconst6))+((gconst2*gconst28*gconst31*gconst9))+((gconst2*gconst28*gconst33*gconst7))+((gconst2*gconst3*gconst30*gconst35))+((gconst2*gconst31*gconst33*gconst4))+((gconst20*gconst21*gconst24*gconst5))+((gconst24*gconst29*gconst8*gconst9))+((gconst24*gconst32*gconst5*gconst9))+((gconst24*gconst33*gconst5*gconst8))+((gconst25*gconst34*gconst5*gconst6))+((gconst26*gconst28*gconst7*gconst9))+((gconst26*gconst3*gconst35*gconst6))+((gconst26*gconst31*gconst4*gconst9))+((gconst26*gconst33*gconst4*gconst7))+(((-1.0)*gconst0*gconst11*gconst29*gconst30))+(((-1.0)*gconst0*gconst17*gconst18*gconst35))+(((-1.0)*gconst0*gconst17*gconst23*gconst30))+(((-1.0)*gconst0*gconst18*gconst23*gconst29))+(((-1.0)*gconst0*gconst29*gconst35*gconst6))+(((-1.0)*gconst0*gconst30*gconst35*gconst5))+(((-1.0)*gconst1*gconst17*gconst19*gconst33))+(((-1.0)*gconst1*gconst17*gconst21*gconst31))+(((-1.0)*gconst1*gconst19*gconst21*gconst29))+(((-1.0)*gconst1*gconst29*gconst31*gconst9))+(((-1.0)*gconst1*gconst29*gconst33*gconst7))+(((-1.0)*gconst1*gconst31*gconst33*gconst5))+(((-1.0)*gconst10*gconst14*gconst16*gconst30))+(((-1.0)*gconst10*gconst14*gconst18*gconst28))+(((-1.0)*gconst10*gconst16*gconst18*gconst26))+(((-1.0)*gconst10*gconst2*gconst28*gconst30))+(((-1.0)*gconst10*gconst26*gconst28*gconst6))+(((-1.0)*gconst10*gconst26*gconst30*gconst4))+(((-1.0)*gconst11*gconst12*gconst17*gconst30))+(((-1.0)*gconst11*gconst12*gconst18*gconst29))+(((-1.0)*gconst11*gconst17*gconst18*gconst24))+(((-1.0)*gconst11*gconst24*gconst29*gconst6))+(((-1.0)*gconst11*gconst24*gconst30*gconst5))+(((-1.0)*gconst12*gconst17*gconst18*gconst23))+(((-1.0)*gconst12*gconst17*gconst35*gconst6))+(((-1.0)*gconst12*gconst18*gconst35*gconst5))+(((-1.0)*gconst12*gconst23*gconst29*gconst6))+(((-1.0)*gconst12*gconst23*gconst30*gconst5))+(((-1.0)*gconst13*gconst17*gconst19*gconst21))+(((-1.0)*gconst13*gconst17*gconst31*gconst9))+(((-1.0)*gconst13*gconst17*gconst33*gconst7))+(((-1.0)*gconst13*gconst19*gconst29*gconst9))+(((-1.0)*gconst13*gconst19*gconst33*gconst5))+(((-1.0)*gconst13*gconst21*gconst29*gconst7))+(((-1.0)*gconst13*gconst21*gconst31*gconst5))+(((-1.0)*gconst14*gconst15*gconst20*gconst21))+(((-1.0)*gconst14*gconst15*gconst32*gconst9))+(((-1.0)*gconst14*gconst15*gconst33*gconst8))+(((-1.0)*gconst14*gconst16*gconst18*gconst22))+(((-1.0)*gconst14*gconst16*gconst34*gconst6))+(((-1.0)*gconst14*gconst18*gconst34*gconst4))+(((-1.0)*gconst14*gconst20*gconst27*gconst9))+(((-1.0)*gconst14*gconst20*gconst3*gconst33))+(((-1.0)*gconst14*gconst21*gconst27*gconst8))+(((-1.0)*gconst14*gconst21*gconst3*gconst32))+(((-1.0)*gconst14*gconst22*gconst28*gconst6))+(((-1.0)*gconst14*gconst22*gconst30*gconst4))+(((-1.0)*gconst15*gconst2*gconst20*gconst33))+(((-1.0)*gconst15*gconst2*gconst21*gconst32))+(((-1.0)*gconst15*gconst20*gconst26*gconst9))+(((-1.0)*gconst15*gconst21*gconst26*gconst8))+(((-1.0)*gconst16*gconst18*gconst2*gconst34))+(((-1.0)*gconst16*gconst2*gconst22*gconst30))+(((-1.0)*gconst16*gconst22*gconst26*gconst6))+(((-1.0)*gconst17*gconst19*gconst25*gconst9))+(((-1.0)*gconst17*gconst21*gconst25*gconst7))+(((-1.0)*gconst17*gconst23*gconst24*gconst6))+(((-1.0)*gconst18*gconst2*gconst22*gconst28))+(((-1.0)*gconst18*gconst22*gconst26*gconst4))+(((-1.0)*gconst18*gconst23*gconst24*gconst5))+(((-1.0)*gconst19*gconst21*gconst25*gconst5))+(((-1.0)*gconst2*gconst20*gconst21*gconst27))+(((-1.0)*gconst2*gconst27*gconst32*gconst9))+(((-1.0)*gconst2*gconst27*gconst33*gconst8))+(((-1.0)*gconst2*gconst28*gconst34*gconst6))+(((-1.0)*gconst2*gconst3*gconst32*gconst33))+(((-1.0)*gconst2*gconst30*gconst34*gconst4))+(((-1.0)*gconst20*gconst21*gconst26*gconst3))+(((-1.0)*gconst24*gconst35*gconst5*gconst6))+(((-1.0)*gconst25*gconst29*gconst7*gconst9))+(((-1.0)*gconst25*gconst31*gconst5*gconst9))+(((-1.0)*gconst25*gconst33*gconst5*gconst7))+(((-1.0)*gconst26*gconst27*gconst8*gconst9))+(((-1.0)*gconst26*gconst3*gconst32*gconst9))+(((-1.0)*gconst26*gconst3*gconst33*gconst8))+(((-1.0)*gconst26*gconst34*gconst4*gconst6)));
op[5]=(((gconst0*gconst17*gconst20*gconst21))+((gconst0*gconst17*gconst32*gconst9))+((gconst0*gconst17*gconst33*gconst8))+((gconst0*gconst20*gconst29*gconst9))+((gconst0*gconst20*gconst33*gconst5))+((gconst0*gconst21*gconst29*gconst8))+((gconst0*gconst21*gconst32*gconst5))+((gconst1*gconst10*gconst17*gconst30))+((gconst1*gconst10*gconst18*gconst29))+((gconst1*gconst17*gconst18*gconst22))+((gconst1*gconst17*gconst34*gconst6))+((gconst1*gconst18*gconst34*gconst5))+((gconst1*gconst22*gconst29*gconst6))+((gconst1*gconst22*gconst30*gconst5))+((gconst10*gconst13*gconst17*gconst18))+((gconst10*gconst13*gconst29*gconst6))+((gconst10*gconst13*gconst30*gconst5))+((gconst10*gconst17*gconst25*gconst6))+((gconst10*gconst18*gconst25*gconst5))+((gconst11*gconst14*gconst15*gconst18))+((gconst11*gconst14*gconst27*gconst6))+((gconst11*gconst14*gconst3*gconst30))+((gconst11*gconst15*gconst2*gconst30))+((gconst11*gconst15*gconst26*gconst6))+((gconst11*gconst18*gconst2*gconst27))+((gconst11*gconst18*gconst26*gconst3))+((gconst12*gconst17*gconst20*gconst9))+((gconst12*gconst17*gconst21*gconst8))+((gconst12*gconst20*gconst21*gconst5))+((gconst12*gconst29*gconst8*gconst9))+((gconst12*gconst32*gconst5*gconst9))+((gconst12*gconst33*gconst5*gconst8))+((gconst13*gconst17*gconst22*gconst6))+((gconst13*gconst18*gconst22*gconst5))+((gconst13*gconst34*gconst5*gconst6))+((gconst14*gconst15*gconst23*gconst6))+((gconst14*gconst16*gconst19*gconst9))+((gconst14*gconst16*gconst21*gconst7))+((gconst14*gconst18*gconst23*gconst3))+((gconst14*gconst19*gconst21*gconst4))+((gconst14*gconst28*gconst7*gconst9))+((gconst14*gconst3*gconst35*gconst6))+((gconst14*gconst31*gconst4*gconst9))+((gconst14*gconst33*gconst4*gconst7))+((gconst15*gconst18*gconst2*gconst23))+((gconst15*gconst2*gconst35*gconst6))+((gconst16*gconst19*gconst2*gconst21))+((gconst16*gconst2*gconst31*gconst9))+((gconst16*gconst2*gconst33*gconst7))+((gconst16*gconst26*gconst7*gconst9))+((gconst17*gconst24*gconst8*gconst9))+((gconst18*gconst2*gconst3*gconst35))+((gconst19*gconst2*gconst28*gconst9))+((gconst19*gconst2*gconst33*gconst4))+((gconst19*gconst26*gconst4*gconst9))+((gconst2*gconst21*gconst28*gconst7))+((gconst2*gconst21*gconst31*gconst4))+((gconst2*gconst23*gconst27*gconst6))+((gconst2*gconst23*gconst3*gconst30))+((gconst20*gconst24*gconst5*gconst9))+((gconst21*gconst24*gconst5*gconst8))+((gconst21*gconst26*gconst4*gconst7))+((gconst22*gconst25*gconst5*gconst6))+((gconst23*gconst26*gconst3*gconst6))+(((-1.0)*gconst0*gconst11*gconst17*gconst30))+(((-1.0)*gconst0*gconst11*gconst18*gconst29))+(((-1.0)*gconst0*gconst17*gconst18*gconst23))+(((-1.0)*gconst0*gconst17*gconst35*gconst6))+(((-1.0)*gconst0*gconst18*gconst35*gconst5))+(((-1.0)*gconst0*gconst23*gconst29*gconst6))+(((-1.0)*gconst0*gconst23*gconst30*gconst5))+(((-1.0)*gconst1*gconst17*gconst19*gconst21))+(((-1.0)*gconst1*gconst17*gconst31*gconst9))+(((-1.0)*gconst1*gconst17*gconst33*gconst7))+(((-1.0)*gconst1*gconst19*gconst29*gconst9))+(((-1.0)*gconst1*gconst19*gconst33*gconst5))+(((-1.0)*gconst1*gconst21*gconst29*gconst7))+(((-1.0)*gconst1*gconst21*gconst31*gconst5))+(((-1.0)*gconst10*gconst14*gconst16*gconst18))+(((-1.0)*gconst10*gconst14*gconst28*gconst6))+(((-1.0)*gconst10*gconst14*gconst30*gconst4))+(((-1.0)*gconst10*gconst16*gconst2*gconst30))+(((-1.0)*gconst10*gconst16*gconst26*gconst6))+(((-1.0)*gconst10*gconst18*gconst2*gconst28))+(((-1.0)*gconst10*gconst18*gconst26*gconst4))+(((-1.0)*gconst11*gconst12*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst29*gconst6))+(((-1.0)*gconst11*gconst12*gconst30*gconst5))+(((-1.0)*gconst11*gconst17*gconst24*gconst6))+(((-1.0)*gconst11*gconst18*gconst24*gconst5))+(((-1.0)*gconst12*gconst17*gconst23*gconst6))+(((-1.0)*gconst12*gconst18*gconst23*gconst5))+(((-1.0)*gconst12*gconst35*gconst5*gconst6))+(((-1.0)*gconst13*gconst17*gconst19*gconst9))+(((-1.0)*gconst13*gconst17*gconst21*gconst7))+(((-1.0)*gconst13*gconst19*gconst21*gconst5))+(((-1.0)*gconst13*gconst29*gconst7*gconst9))+(((-1.0)*gconst13*gconst31*gconst5*gconst9))+(((-1.0)*gconst13*gconst33*gconst5*gconst7))+(((-1.0)*gconst14*gconst15*gconst20*gconst9))+(((-1.0)*gconst14*gconst15*gconst21*gconst8))+(((-1.0)*gconst14*gconst16*gconst22*gconst6))+(((-1.0)*gconst14*gconst18*gconst22*gconst4))+(((-1.0)*gconst14*gconst20*gconst21*gconst3))+(((-1.0)*gconst14*gconst27*gconst8*gconst9))+(((-1.0)*gconst14*gconst3*gconst32*gconst9))+(((-1.0)*gconst14*gconst3*gconst33*gconst8))+(((-1.0)*gconst14*gconst34*gconst4*gconst6))+(((-1.0)*gconst15*gconst2*gconst20*gconst21))+(((-1.0)*gconst15*gconst2*gconst32*gconst9))+(((-1.0)*gconst15*gconst2*gconst33*gconst8))+(((-1.0)*gconst15*gconst26*gconst8*gconst9))+(((-1.0)*gconst16*gconst18*gconst2*gconst22))+(((-1.0)*gconst16*gconst2*gconst34*gconst6))+(((-1.0)*gconst17*gconst25*gconst7*gconst9))+(((-1.0)*gconst18*gconst2*gconst34*gconst4))+(((-1.0)*gconst19*gconst25*gconst5*gconst9))+(((-1.0)*gconst2*gconst20*gconst27*gconst9))+(((-1.0)*gconst2*gconst20*gconst3*gconst33))+(((-1.0)*gconst2*gconst21*gconst27*gconst8))+(((-1.0)*gconst2*gconst21*gconst3*gconst32))+(((-1.0)*gconst2*gconst22*gconst28*gconst6))+(((-1.0)*gconst2*gconst22*gconst30*gconst4))+(((-1.0)*gconst20*gconst26*gconst3*gconst9))+(((-1.0)*gconst21*gconst25*gconst5*gconst7))+(((-1.0)*gconst21*gconst26*gconst3*gconst8))+(((-1.0)*gconst22*gconst26*gconst4*gconst6))+(((-1.0)*gconst23*gconst24*gconst5*gconst6)));
op[6]=(((gconst0*gconst17*gconst20*gconst9))+((gconst0*gconst17*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+((gconst0*gconst29*gconst8*gconst9))+((gconst0*gconst32*gconst5*gconst9))+((gconst0*gconst33*gconst5*gconst8))+((gconst1*gconst10*gconst17*gconst18))+((gconst1*gconst10*gconst29*gconst6))+((gconst1*gconst10*gconst30*gconst5))+((gconst1*gconst17*gconst22*gconst6))+((gconst1*gconst18*gconst22*gconst5))+((gconst1*gconst34*gconst5*gconst6))+((gconst10*gconst13*gconst17*gconst6))+((gconst10*gconst13*gconst18*gconst5))+((gconst10*gconst25*gconst5*gconst6))+((gconst11*gconst14*gconst15*gconst6))+((gconst11*gconst14*gconst18*gconst3))+((gconst11*gconst15*gconst18*gconst2))+((gconst11*gconst2*gconst27*gconst6))+((gconst11*gconst2*gconst3*gconst30))+((gconst11*gconst26*gconst3*gconst6))+((gconst12*gconst17*gconst8*gconst9))+((gconst12*gconst20*gconst5*gconst9))+((gconst12*gconst21*gconst5*gconst8))+((gconst13*gconst22*gconst5*gconst6))+((gconst14*gconst16*gconst7*gconst9))+((gconst14*gconst19*gconst4*gconst9))+((gconst14*gconst21*gconst4*gconst7))+((gconst14*gconst23*gconst3*gconst6))+((gconst15*gconst2*gconst23*gconst6))+((gconst16*gconst19*gconst2*gconst9))+((gconst16*gconst2*gconst21*gconst7))+((gconst18*gconst2*gconst23*gconst3))+((gconst19*gconst2*gconst21*gconst4))+((gconst2*gconst28*gconst7*gconst9))+((gconst2*gconst3*gconst35*gconst6))+((gconst2*gconst31*gconst4*gconst9))+((gconst2*gconst33*gconst4*gconst7))+((gconst24*gconst5*gconst8*gconst9))+((gconst26*gconst4*gconst7*gconst9))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-1.0)*gconst0*gconst11*gconst29*gconst6))+(((-1.0)*gconst0*gconst11*gconst30*gconst5))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+(((-1.0)*gconst0*gconst35*gconst5*gconst6))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-1.0)*gconst1*gconst29*gconst7*gconst9))+(((-1.0)*gconst1*gconst31*gconst5*gconst9))+(((-1.0)*gconst1*gconst33*gconst5*gconst7))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-1.0)*gconst10*gconst2*gconst28*gconst6))+(((-1.0)*gconst10*gconst2*gconst30*gconst4))+(((-1.0)*gconst10*gconst26*gconst4*gconst6))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-1.0)*gconst11*gconst24*gconst5*gconst6))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-1.0)*gconst2*gconst27*gconst8*gconst9))+(((-1.0)*gconst2*gconst3*gconst32*gconst9))+(((-1.0)*gconst2*gconst3*gconst33*gconst8))+(((-1.0)*gconst2*gconst34*gconst4*gconst6))+(((-1.0)*gconst25*gconst5*gconst7*gconst9))+(((-1.0)*gconst26*gconst3*gconst8*gconst9)));
op[7]=(((gconst14*x83))+((gconst14*x86))+((gconst17*x78))+((gconst17*x80))+((x88*x89))+((x89*x90))+((((gconst20*gconst5))*((gconst0*gconst9))))+(((-1.0)*gconst17*x93))+(((-1.0)*x81*x92))+(((-1.0)*x84*x97))+(((-1.0)*x87*x95))+(((-1.0)*x88*x94))+(((-1.0)*x90*x94))+((gconst0*gconst21*x79))+((gconst1*gconst10*x81))+((gconst1*gconst22*x82))+((gconst10*gconst13*x82))+((gconst11*gconst18*x85))+((gconst11*gconst6*x84))+((gconst12*gconst9*x79))+((gconst23*gconst6*x85))+((gconst7*gconst9*x87))+(((-1.0)*gconst10*gconst18*x96))+(((-1.0)*gconst14*gconst4*x95))+(((-1.0)*gconst20*gconst9*x98))+(((-1.0)*gconst21*gconst8*x98))+(((-1.0)*gconst22*gconst6*x96))+(((-1.0)*gconst11*gconst17*gconst6*x91))+(((-1.0)*gconst11*gconst5*gconst6*x71))+(((-1.0)*gconst23*gconst5*gconst6*x91))+(((-1.0)*gconst5*gconst7*gconst9*x72))+(((-1.0)*gconst14*gconst3*gconst8*gconst9)));
op[8]=(((gconst2*x83))+((gconst2*x86))+((gconst5*x78))+((gconst5*x80))+(((-1.0)*gconst5*x93))+(((-1.0)*x82*x92))+(((-1.0)*x85*x97))+(((-1.0)*x89*x95)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x99=(cj1*px);
IkReal x100=(cj1*py);
IkReal x101=(px*py);
IkReal x102=(px*sj1);
IkReal x103=(py*sj1);
IkReal x104=py*py;
IkReal x105=((1.88421228021198e+20)*x104);
IkReal x106=(cj1*px*pz);
IkReal x107=(py*pz*sj1);
IkReal x108=(cj1*px*py*sj1);
IkReal x109=px*px;
IkReal x110=(cj1*sj1*x109);
IkReal x111=(cj1*sj1*x104);
IkReal x112=cj1*cj1;
IkReal x113=(px*py*x112);
IkReal x114=(x109*x112);
IkReal x115=((0.80206477683506)*x104);
j2eval[0]=((-4.13352904564461e+15)+(((-1.0)*x105))+(((5.20112858745089e+17)*x100))+(((1.81012834196361e+18)*x103))+(((1.81012834196361e+18)*x99))+(((7443213305144.41)*pz))+(((1.39140900085095e+20)*x101))+(((1.39140900085095e+20)*x110))+(((-1.88421228021198e+20)*x114))+(((-3.76842456042396e+20)*x108))+(((-5.20112858745089e+17)*x102))+(((-1.99121283273393e+15)*x106))+(((-1.99121283273393e+15)*x107))+(((-1.39140900085095e+20)*x111))+(((-2.78281800170191e+20)*x113))+((x105*x112)));
j2eval[1]=IKsign(((-1.75954593139749e-5)+(((-1.0)*x115))+(((0.592290030945059)*x101))+(((0.592290030945059)*x110))+(((0.00221399790437356)*x100))+(((3.16840054659593e-8)*pz))+(((0.0077052898969352)*x103))+(((0.0077052898969352)*x99))+(((-0.592290030945059)*x111))+(((-1.18458006189012)*x113))+(((-0.00221399790437356)*x102))+(((-0.80206477683506)*x114))+(((-1.60412955367012)*x108))+(((-8.47612391178222e-6)*x106))+(((-8.47612391178222e-6)*x107))+((x112*x115))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x116=(cj1*px);
IkReal x117=(cj1*py);
IkReal x118=(px*py);
IkReal x119=(px*sj1);
IkReal x120=(py*sj1);
IkReal x121=py*py;
IkReal x122=((0.80206477683506)*x121);
IkReal x123=(cj1*px*pz);
IkReal x124=(py*pz*sj1);
IkReal x125=(cj1*px*py*sj1);
IkReal x126=px*px;
IkReal x127=(cj1*sj1*x126);
IkReal x128=(cj1*sj1*x121);
IkReal x129=cj1*cj1;
IkReal x130=(px*py*x129);
IkReal x131=(x126*x129);
IkReal x132=((0.0321963051308587)*x121);
IkReal x133=((0.000398758997416303)*x121);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(((-1.75954593139749e-5)+(((-1.0)*x122))+(((0.592290030945059)*x118))+(((0.592290030945059)*x127))+(((0.00221399790437356)*x117))+(((3.16840054659593e-8)*pz))+(((0.0077052898969352)*x116))+(((0.0077052898969352)*x120))+(((-0.592290030945059)*x128))+(((-1.18458006189012)*x130))+(((-0.00221399790437356)*x119))+(((-0.80206477683506)*x131))+(((-1.60412955367012)*x125))+(((-8.47612391178222e-6)*x123))+(((-8.47612391178222e-6)*x124))+((x122*x129)))),-1);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(((2.03796815476895e-8)+(((-1.0)*x132))+(((2.50687909283599e-6)*pz))+(((0.000114898769987792)*x116))+(((0.0435994641559887)*x128))+(((0.0871989283119775)*x130))+(((0.000162976104999011)*x119))+(((0.000114898769987792)*x120))+(((-0.000670641779984642)*x123))+(((-0.000670641779984642)*x124))+(((-0.0321963051308587)*x131))+(((-0.0643926102617175)*x125))+(((-0.0435994641559887)*x118))+(((-0.0435994641559887)*x127))+(((-0.000162976104999011)*x117))+((x129*x132)))),IkReal(((2.52172695405801e-10)+(((-1.0)*x133))+(((1.4231117062506e-6)*x116))+(((1.42311170625058e-6)*x120))+(((2.01559857140207e-6)*x119))+(((0.000539214123857237)*x128))+(((0.00107842824771447)*x130))+(((0.0541988499744818)*x123))+(((0.0541988499744818)*x124))+(((-2.01559857140207e-6)*x117))+(((-0.000539214123857237)*x118))+(((-0.000539214123857237)*x127))+(((-0.000398758997416303)*x131))+(((-0.000797517994832606)*x125))+((x129*x133))+(((-1.0)*(0.000202596927170112)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x134.value)))+(x135.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x136=((0.0436671817444836)*pz);
IkReal x137=((4.61469514725582e-7)*px);
IkReal x138=((4.61469514725582e-7)*py);
IkReal x139=IKsin(j2);
IkReal x140=IKcos(j2);
IkReal x141=((0.00373223319414903)*x140);
IkReal x142=(pz*x139);
IkReal x143=((0.593119110563167)*x142);
IkReal x144=(pz*x140);
IkReal x145=((0.00734592310873367)*x144);
IkReal x146=(cj1*px);
IkReal x147=((0.0123545374052797)*x139);
IkReal x148=((0.998449156192156)*x140);
IkReal x149=(py*sj1);
IkReal x150=(cj1*py);
IkReal x151=(px*sj1);
IkReal x152=((0.803187673123564)*x139);
IkReal x153=((0.00993338211466915)*x140);
IkReal x154=((0.593119110563167)*x139);
IkReal x155=((0.00734592310873367)*x140);
IkReal x156=((0.0322463187185221)*pz);
IkReal x157=((0.00288094476558444)*x140);
IkReal x158=((0.803187673123564)*x142);
IkReal x159=((0.00993338211466915)*x144);
IkReal x160=(cj1*x139);
IkReal x161=(sj1*x139);
IkReal x162=(cj1*pz*x139);
evalcond[0]=((-2.75921214119052e-11)+x136+x143+x145+(((-1.0)*x141))+(((4.61578266667558e-5)*x139))+((x146*x148))+((x148*x149))+(((-1.0)*cj1*x137))+(((-1.0)*sj1*x138))+(((-1.0)*x146*x147))+(((-1.0)*x147*x149)));
evalcond[1]=((5.46045278977045e-6)+(((5.8327353802499e-5)*x140))+(((0.0436671817444836)*x151))+(((0.0322463187185221)*x146))+(((0.0322463187185221)*x149))+(((0.00471373736176725)*x139))+(((-0.0436671817444836)*x150))+((x151*x154))+((x151*x155))+(((-1.0)*x146*x152))+(((-1.0)*x146*x153))+(((-1.0)*x149*x152))+(((-1.0)*x149*x153))+(((-1.0)*x150*x154))+(((-1.0)*x150*x155)));
evalcond[2]=((-3.73298228277529e-11)+x157+x158+x159+(((-1.0)*x156))+(((-3.56802651959938e-5)*x139))+((cj1*x138))+((x147*x150))+((x148*x151))+(((-1.0)*sj1*x137))+(((-1.0)*x147*x151))+(((-1.0)*x148*x150)));
evalcond[3]=(x138+(((2.75921214119052e-11)*sj1))+(((0.803187673123564)*x162))+(((-4.61578266667557e-5)*x161))+(((-3.56802651959937e-5)*x160))+((cj1*x157))+((cj1*x159))+((py*x147))+((sj1*x141))+(((-1.0)*(3.73298228277528e-11)*cj1))+(((-1.0)*cj1*x156))+(((-1.0)*py*x148))+(((-1.0)*sj1*x136))+(((-1.0)*sj1*x143))+(((-1.0)*sj1*x145)));
evalcond[4]=((((-1.0)*x137))+(((4.61578266667557e-5)*x160))+(((0.593119110563167)*x162))+(((-3.56802651959937e-5)*x161))+((cj1*x136))+((cj1*x145))+((px*x148))+((sj1*x157))+((sj1*x158))+((sj1*x159))+(((-1.0)*(3.73298228277528e-11)*sj1))+(((-1.0)*(2.75921214119052e-11)*cj1))+(((-1.0)*cj1*x141))+(((-1.0)*px*x147))+(((-1.0)*sj1*x156)));
IkReal x163=IKcos(j2);
IkReal x164=IKcos(j2);
IkReal x165=IKcos(j2);
IkReal x166=IKcos(j2);
IkReal x167=IKcos(j2);
IkReal x168=IKcos(j2);
IkReal x169=IKcos(j2);
IkReal x170=IKcos(j2);
IkReal x171=IKcos(j2);
IkReal x172=IKcos(j2);
IkReal x173=IKcos(j2);
IkReal x174=IKcos(j2);
IkReal x175=IKcos(j2);
IkReal x176=IKcos(j2);
IkReal x177=IKcos(j2);
evalcond[5]=((2.22227533585522e-5)+(((6.36978393729006e-10)*(IKcos(j2))))+(((1.0085896050355e-8)*(x163*x163)))+(((5.14782807713054e-8)*(IKsin(j2))))+(((-0.646302897923253)*(py*py)))+(((-0.999847365405289)*(pz*pz)))+(((-0.353849736671459)*(px*px)))+(((1.1402484758477e-8)*(pz*pz)*(IKsin(j2))))+(((0.000641551518940155)*(py*py)*(IKcos(j2))))+(((0.996748082906331)*(pz*pz)*(x164*x164)))+(((0.0517996799941765)*(py*py)*(IKsin(j2))))+(((0.94995570487655)*px*py))+(((0.292453161251794)*(cj1*cj1)*(py*py)))+(((-9.21507695171575e-7)*(pz*pz)*(IKcos(j2))))+(((-2.4963854929269e-10)*(IKcos(j2))*(IKsin(j2))))+(((-0.0517996913966612)*(px*px)*(IKsin(j2))))+(((-0.292453161251794)*(cj1*cj1)*(px*px)))+(((-0.645011766177409)*(px*px)*(x165*x165)))+(((-0.00064063001124498)*(px*px)*(IKcos(j2))))+(((-0.351736316728922)*(py*py)*(x166*x166)))+(((0.000393767648585352)*px*py*(IKcos(j2))))+(((0.0198459945407431)*px*pz*sj1))+(((0.014655464776624)*cj1*px*pz))+(((0.014655464776624)*py*pz*sj1))+(((0.00128218153018513)*(cj1*cj1)*(px*px)*(IKcos(j2))))+(((0.0159567401338567)*(px*px)*(IKcos(j2))*(IKsin(j2))))+(((0.00871401476103507)*(py*py)*(IKcos(j2))*(IKsin(j2))))+(((0.103599371390838)*(cj1*cj1)*(px*px)*(IKsin(j2))))+(((0.293275449448486)*(cj1*cj1)*(px*px)*(x167*x167)))+(((0.94995570487655)*cj1*sj1*(px*px)))+(((0.0318940684398985)*px*py*(IKsin(j2))))+(((-0.00128218153018513)*(cj1*cj1)*(py*py)*(IKcos(j2))))+(((-0.0198459945407431)*cj1*py*pz))+(((-0.0246707548948918)*(pz*pz)*(IKcos(j2))*(IKsin(j2))))+(((-0.103599371390838)*(cj1*cj1)*(py*py)*(IKsin(j2))))+(((-0.293275449448486)*(cj1*cj1)*(py*py)*(x168*x168)))+(((-0.94995570487655)*cj1*sj1*(py*py)))+(((-1.8999114097531)*px*py*(cj1*cj1)))+(((-0.952625976874247)*px*py*(x169*x169)))+(((0.0235836673067702)*px*py*(IKcos(j2))*(IKsin(j2))))+(((0.0396819782831805)*cj1*py*pz*(x170*x170)))+(((0.000393767648585352)*cj1*sj1*(px*px)*(IKcos(j2))))+(((0.0007960354083296)*cj1*py*pz*(IKsin(j2))))+(((0.00107952307326698)*cj1*px*pz*(IKsin(j2))))+(((0.00107952307326698)*py*pz*sj1*(IKsin(j2))))+(((0.00724272537282164)*(cj1*cj1)*(py*py)*(IKcos(j2))*(IKsin(j2))))+(((0.0643926285975296)*px*pz*sj1*(IKcos(j2))))+(((0.0318940684398985)*cj1*sj1*(px*px)*(IKsin(j2))))+(((0.952625976874247)*cj1*sj1*(py*py)*(x171*x171)))+(((1.90525195374849)*px*py*(cj1*cj1)*(x172*x172)))+(((-0.0396819782831805)*px*pz*sj1*(x173*x173)))+(((-0.000393767648585352)*cj1*sj1*(py*py)*(IKcos(j2))))+(((-0.000787535297170704)*px*py*(cj1*cj1)*(IKcos(j2))))+(((-0.0007960354083296)*px*pz*sj1*(IKsin(j2))))+(((-0.0293244859332129)*cj1*px*pz*(x174*x174)))+(((-0.0293244859332129)*py*pz*sj1*(x175*x175)))+(((-0.00724272537282164)*(cj1*cj1)*(px*px)*(IKcos(j2))*(IKsin(j2))))+(((-0.0643926285975296)*cj1*py*pz*(IKcos(j2))))+(((-0.952625976874247)*cj1*sj1*(px*px)*(x176*x176)))+(((-0.0871989147522992)*cj1*px*pz*(IKcos(j2))))+(((-0.0871989147522992)*py*pz*sj1*(IKcos(j2))))+(((-0.0318940684398985)*cj1*sj1*(py*py)*(IKsin(j2))))+(((-0.0637881368797971)*px*py*(cj1*cj1)*(IKsin(j2))))+(((-0.584906322503587)*cj1*px*py*sj1))+(((0.0235836673067702)*cj1*sj1*(px*px)*(IKcos(j2))*(IKsin(j2))))+(((0.00256436306037025)*cj1*px*py*sj1*(IKcos(j2))))+(((1.60363866430653)*cj1*py*pz*(IKcos(j2))*(IKsin(j2))))+(((0.207198742781675)*cj1*px*py*sj1*(IKsin(j2))))+(((0.586550898896973)*cj1*px*py*sj1*(x177*x177)))+(((-0.0235836673067702)*cj1*sj1*(py*py)*(IKcos(j2))*(IKsin(j2))))+(((-0.0471673346135404)*px*py*(cj1*cj1)*(IKcos(j2))*(IKsin(j2))))+(((-1.60363866430653)*px*pz*sj1*(IKcos(j2))*(IKsin(j2))))+(((-1.18421703996283)*cj1*px*pz*(IKcos(j2))*(IKsin(j2))))+(((-1.18421703996283)*py*pz*sj1*(IKcos(j2))*(IKsin(j2))))+(((-0.0144854507456433)*cj1*px*py*sj1*(IKcos(j2))*(IKsin(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x178=(cj1*px);
IkReal x179=(cj1*py);
IkReal x180=(px*sj1);
IkReal x181=(py*sj1);
IkReal x182=((-8.16331994275128e-5)+(((0.584316729008337)*pz))+(((0.652816857958148)*x179))+(((-0.652816857958148)*x180))+(((-0.482083094670047)*x178))+(((-0.482083094670047)*x181)));
IkReal x183=((5.87777364865869e-5)+(((0.34710222817784)*x178))+(((0.34710222817784)*x181))+(((0.470049021980954)*x180))+(((0.811525698994633)*pz))+(((-0.470049021980954)*x179)));
soleval[0]=((0.000256273408351651)+(((0.0322463187185221)*x180))+(((-0.0436671817444836)*x178))+(((-0.0436671817444836)*x181))+(((-0.0322463187185221)*x179))+(((-1.0)*(4.61469514725582e-7)*pz))+(((0.803048186562413)*cj2*x183))+(((0.803048186562413)*sj2*x182))+(((0.593436569673798)*cj2*x182))+(((-0.593436569673798)*sj2*x183)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - roboy_xylophone_left_arm (dca36c230834b61ee21c076c797e3308)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
